package

kotlin.annotation.annotation() internal final class Ann : kotlin.Annotation {
    public constructor Ann()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class CustomDelegate {
    public constructor CustomDelegate()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun get(/*0*/ thisRef: kotlin.Any?, /*1*/ prop: kotlin.PropertyMetadata): kotlin.String
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal final fun set(/*0*/ thisRef: kotlin.Any?, /*1*/ prop: kotlin.PropertyMetadata, /*2*/ value: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@sparam:Ann() internal final class SomeClass {
    @sparam:Ann() public constructor SomeClass()
    @sparam:Ann() protected final var delegatedProperty: kotlin.String
    @sparam:Ann() protected final var mutableProperty: kotlin.String
    @sparam:Ann() protected final var mutablePropertyWithAnnotationList: kotlin.String
    @sparam:Ann() internal final var propertyWithCustomSetter: kotlin.Int
    @sparam:Ann() protected final val simpleProperty: kotlin.String = "text"
    @sparam:Ann() internal final fun anotherFun(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
