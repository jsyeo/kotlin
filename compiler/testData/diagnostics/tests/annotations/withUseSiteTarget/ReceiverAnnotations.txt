package

@receiver:Ann() internal val kotlin.String.extensionProperty: kotlin.String
@receiver:Ann() internal fun kotlin.String.length2(): kotlin.Int

kotlin.annotation.annotation() internal final class Ann : kotlin.Annotation {
    public constructor Ann()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@receiver:Ann() internal final class SomeClass {
    @receiver:Ann() public constructor SomeClass(/*0*/ @receiver:Ann() a: kotlin.String)
    @receiver:Ann() protected final val simpleProperty: kotlin.String = "text"
    @receiver:Ann() internal final fun anotherFun(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
