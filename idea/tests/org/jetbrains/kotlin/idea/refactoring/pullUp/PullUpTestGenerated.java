/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.idea.refactoring.pullUp;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/refactoring/pullUp")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class PullUpTestGenerated extends AbstractPullUpTest {
    public void testAllFilesPresentInPullUp() throws Exception {
        JetTestUtils.assertAllTestsPresentInSingleGeneratedClass(this.getClass(), new File("idea/testData/refactoring/pullUp"), Pattern.compile("^(.+)\\.kt$"));
    }

    @TestMetadata("k2k/accidentalOverrides.kt")
    public void testK2k_AccidentalOverrides() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/accidentalOverrides.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/clashWithSuper.kt")
    public void testK2k_ClashWithSuper() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/clashWithSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/fromClassToClass.kt")
    public void testK2k_FromClassToClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/fromClassToClass.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/fromClassToClassMakeAbstract.kt")
    public void testK2k_FromClassToClassMakeAbstract() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/fromClassToClassMakeAbstract.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/fromClassToClassWithGenerics.kt")
    public void testK2k_FromClassToClassWithGenerics() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/fromClassToClassWithGenerics.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/fromClassToInterface.kt")
    public void testK2k_FromClassToInterface() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/fromClassToInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/fromClassToInterfaceMakeAbstract.kt")
    public void testK2k_FromClassToInterfaceMakeAbstract() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/fromClassToInterfaceMakeAbstract.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/implicitCompanionUsages.kt")
    public void testK2k_ImplicitCompanionUsages() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/implicitCompanionUsages.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/inaccessibleMemberUsed.kt")
    public void testK2k_InaccessibleMemberUsed() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/inaccessibleMemberUsed.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/initializerInConstructor.kt")
    public void testK2k_InitializerInConstructor() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/initializerInConstructor.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/initializerInMultipleConstructorsEq.kt")
    public void testK2k_InitializerInMultipleConstructorsEq() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/initializerInMultipleConstructorsEq.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/initializerInMultipleConstructorsNonEq.kt")
    public void testK2k_InitializerInMultipleConstructorsNonEq() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/initializerInMultipleConstructorsNonEq.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/innerClassToInterface.kt")
    public void testK2k_InnerClassToInterface() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/innerClassToInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/moveAllSuperInterfaces.kt")
    public void testK2k_MoveAllSuperInterfaces() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/moveAllSuperInterfaces.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/moveAllSuperInterfacesWithGenerics.kt")
    public void testK2k_MoveAllSuperInterfacesWithGenerics() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/moveAllSuperInterfacesWithGenerics.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/moveSuperInterfaces.kt")
    public void testK2k_MoveSuperInterfaces() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/moveSuperInterfaces.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/moveSuperInterfacesToEmptySpecifierList.kt")
    public void testK2k_MoveSuperInterfacesToEmptySpecifierList() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/moveSuperInterfacesToEmptySpecifierList.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/moveSuperInterfaceToItSelf.kt")
    public void testK2k_MoveSuperInterfaceToItSelf() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/moveSuperInterfaceToItSelf.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/multipleInitializersInConstructorsEq.kt")
    public void testK2k_MultipleInitializersInConstructorsEq() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/multipleInitializersInConstructorsEq.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/noCaret.kt")
    public void testK2k_NoCaret() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/noCaret.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/noClashWithAbstractSuper.kt")
    public void testK2k_NoClashWithAbstractSuper() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/noClashWithAbstractSuper.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/noInitializationInInterface.kt")
    public void testK2k_NoInitializationInInterface() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/noInitializationInInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/noSuperClass.kt")
    public void testK2k_NoSuperClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/noSuperClass.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/outsideOfClass.kt")
    public void testK2k_OutsideOfClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/outsideOfClass.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/parametersInPrimaryInitializer.kt")
    public void testK2k_ParametersInPrimaryInitializer() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/parametersInPrimaryInitializer.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/propertyDependenceSatisfied.kt")
    public void testK2k_PropertyDependenceSatisfied() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/propertyDependenceSatisfied.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/propertyDependenceUnsatisfied.kt")
    public void testK2k_PropertyDependenceUnsatisfied() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/propertyDependenceUnsatisfied.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/publicToInterface.kt")
    public void testK2k_PublicToInterface() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/publicToInterface.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/superToThis.kt")
    public void testK2k_SuperToThis() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/superToThis.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/toIndirectSuperClass.kt")
    public void testK2k_ToIndirectSuperClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/toIndirectSuperClass.kt");
        doTest(fileName);
    }

    @TestMetadata("k2k/usedPrivateToClass.kt")
    public void testK2k_UsedPrivateToClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/refactoring/pullUp/k2k/usedPrivateToClass.kt");
        doTest(fileName);
    }
}
